#Approach 3 T.c -> O(nm) , S.c -> O(n)

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> curr(n+1);
        
        for(int i = m-1; i >= 0; i--){
            curr[n-1] = 1;
            for(int j = n-1; j >= 0; j--){
                if(i == m-1 && j == n-1) continue;
                curr[j] = curr[j] + curr[j+1];
            }
        }
        return curr[0];
    }
};

#Approach 2 T.c -> O(nm) , S.c -> O(2n)

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> curr(n+1),next(n+1);

        for(int i = m-1; i >= 0; i--){
            curr[n-1] = 1;
            for(int j = n-1; j >= 0; j--){
                if(i == m-1 && j == n-1) continue;
                curr[j] = next[j] + curr[j+1];
            }
            next = curr;
        }
        return curr[0];
    }
};

#Approach 1 T.c -> O(nm) , S.c -> O(nm)

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1));
        dp[m-1][n-1] = 1;

        for(int i = m-1; i >= 0; i--){
            for(int j = n-1; j >= 0; j--){
                if(i == m-1 && j == n-1) continue;
                dp[i][j] = dp[i+1][j] + dp[i][j+1];
            }
        }
        return dp[0][0];
    }
};
