#Approach 3 : T.c -> O(nm) , S.c -> O(1)

class Solution {
public:
    void setZeroes(vector<vector<int>>& mt) {
        int col0 = 1, n = mt.size(), m = mt[0].size();

        for(int i = 0; i < n; i++){
            if(mt[i][0] == 0) col0 = 0;
            for(int j = 1; j < m; j++){
                if(mt[i][j] == 0){
                    mt[0][j] = 0;
                    mt[i][0] = 0;
                }
            }
        }

        for(int i = n-1; i >= 0; i--){
            for(int j = m-1; j >= 1; j--){
                if(mt[i][0] == 0 || mt[0][j] == 0) mt[i][j] = 0;
            }
            if(!col0) mt[i][0] = 0;
        }
    }
};

#Approach 2 : T.c -> O(nm) , S.c -> O(n+m)

class Solution {
public:
    void setZeroes(vector<vector<int>>& mt) {
        int n = mt.size(), m = mt[0].size();
        vector<int> row(n,1),col(m,1);

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(mt[i][j] == 0){
                    row[i] = col[j] = 0;
                }
            }
        }

        for(int i = n-1; i >= 0; i--){
            for(int j = m-1; j >= 0; j--){
                if(!row[i] || !col[j]) mt[i][j] = 0;
            }
        }
    }
};

#Approach 1 : T.c -> O(nm) , S.c -> O(nm)

class Solution {
public:
    void setZeroes(vector<vector<int>>& mt) {
        int n = mt.size(), m = mt[0].size();
        vector<vector<int>> ans = mt;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(ans[i][j] == 0){
                    int k = i-1;
                    while(k >= 0 && mt[k][j]) mt[k--][j] = 0;

                    k = i+1;
                    while(k < n && mt[k][j]) mt[k++][j] = 0;

                    k = j-1;
                    while(k >= 0 && mt[i][k]) mt[i][k--] = 0;

                    k = j+1;
                    while(k < m && mt[i][k]) mt[i][k++] = 0;
                }
            }
        }
    }
};
